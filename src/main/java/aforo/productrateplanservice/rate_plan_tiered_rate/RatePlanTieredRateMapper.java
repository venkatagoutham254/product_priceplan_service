package aforo.productrateplanservice.rate_plan_tiered_rate;

import org.mapstruct.AfterMapping;
import org.mapstruct.Context;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingConstants;
import org.mapstruct.MappingTarget;
import org.mapstruct.ReportingPolicy;

import aforo.productrateplanservice.exception.NotFoundException;
import aforo.productrateplanservice.rate_plan.RatePlan;
import aforo.productrateplanservice.rate_plan.RatePlanRepository;
import aforo.productrateplanservice.rate_plan_tiered_rate_details.CreateRatePlanTieredRateDetailsRequest;
import aforo.productrateplanservice.rate_plan_tiered_rate_details.RatePlanTieredRateDetails;
import aforo.productrateplanservice.rate_plan_tiered_rate_details.RatePlanTieredRateDetailsDTO;
import aforo.productrateplanservice.rate_plan_tiered_rate_details.UpdateRatePlanTieredRateDetailsRequest;

import java.util.Set;
import java.util.stream.Collectors;

@Mapper(
        componentModel = MappingConstants.ComponentModel.SPRING,
        unmappedTargetPolicy = ReportingPolicy.IGNORE
)
public interface RatePlanTieredRateMapper {

    @Mapping(target = "ratePlanId", ignore = true)
    RatePlanTieredRateDTO updateRatePlanTieredRateDTO(RatePlanTieredRate ratePlanTieredRate,
                                                      @MappingTarget RatePlanTieredRateDTO ratePlanTieredRateDTO);

    @AfterMapping
    default void afterUpdateRatePlanTieredRateDTO(RatePlanTieredRate ratePlanTieredRate,
                                                  @MappingTarget RatePlanTieredRateDTO ratePlanTieredRateDTO) {
        // Set RatePlan ID
        ratePlanTieredRateDTO.setRatePlanId(ratePlanTieredRate.getRatePlan() == null ? null : ratePlanTieredRate.getRatePlan().getRatePlanId());

        // Map the child details (if available)
        if (ratePlanTieredRate.getRatePlanTieredRateDetails() != null) {
            Set<RatePlanTieredRateDetailsDTO> detailsDTOs = ratePlanTieredRate.getRatePlanTieredRateDetails()
                    .stream()
                    .map(this::mapToRatePlanTieredRateDetailsDTO)
                    .collect(Collectors.toSet());
            ratePlanTieredRateDTO.setRatePlanTieredRateDetailsDTO(detailsDTOs);
        }
    }

    @Mapping(target = "ratePlanTieredRateId", ignore = true)
    @Mapping(target = "ratePlan", ignore = true)
    void updateRatePlanTieredRate(RatePlanTieredRateDTO ratePlanTieredRateDTO,
                                  @MappingTarget RatePlanTieredRate ratePlanTieredRate,
                                  @Context RatePlanRepository ratePlanRepository);

    @AfterMapping
    default void afterUpdateRatePlanTieredRate(RatePlanTieredRateDTO ratePlanTieredRateDTO,
                                               @MappingTarget RatePlanTieredRate ratePlanTieredRate,
                                               @Context RatePlanRepository ratePlanRepository) {
        // Set the RatePlan entity
        final RatePlan ratePlan = ratePlanTieredRateDTO.getRatePlanId() == null ? null : ratePlanRepository.findById(ratePlanTieredRateDTO.getRatePlanId())
                .orElseThrow(() -> new NotFoundException("RatePlan not found"));
        ratePlanTieredRate.setRatePlan(ratePlan);
    }

    // Maps from DTO to entity, ignoring the ID (auto-generated by the database)
    @Mapping(target = "tierNumber", ignore = true)
    RatePlanTieredRateDetails mapToRatePlanTieredRateDetails(RatePlanTieredRateDetailsDTO detailsDTO);

    // Maps from entity to DTO, ensuring correct mapping for 'tierNumber'
    @Mapping(target = "tierNumber", source = "tierNumber")  // Map tierNumber correctly
    RatePlanTieredRateDetailsDTO mapToRatePlanTieredRateDetailsDTO(RatePlanTieredRateDetails details);

    // Explicit mapping method for Object to Long conversion
    default Long map(Object value) {
        if (value instanceof Long) {
            return (Long) value;
        }
        return null;  // Handle other cases or throw an exception if necessary
    }

    // Map CreateRatePlanTieredRateRequest to RatePlanTieredRate entity
    @Mapping(target = "ratePlan", ignore = true) // We set ratePlan separately in the service
    RatePlanTieredRate mapToRatePlanTieredRate(CreateRatePlanTieredRateRequest createRequest);

    // Map CreateRatePlanTieredRateDetailsRequest to RatePlanTieredRateDetails entity
    @Mapping(target = "ratePlanTieredRate", ignore = true) // We set ratePlanTieredRate separately in the service
    RatePlanTieredRateDetails mapToRatePlanTieredRateDetails(CreateRatePlanTieredRateDetailsRequest detailsRequest);

    // Map UpdateRatePlanTieredRateRequest to existing RatePlanTieredRate entity
    void updateRatePlanTieredRate(UpdateRatePlanTieredRateRequest updateRequest,
                                  @MappingTarget RatePlanTieredRate ratePlanTieredRate);

    // Map UpdateRatePlanTieredRateDetailsRequest to existing RatePlanTieredRateDetails entity
    void updateRatePlanTieredRateDetails(UpdateRatePlanTieredRateDetailsRequest updateDetailsRequest,
                                         @MappingTarget RatePlanTieredRateDetails ratePlanTieredRateDetails);
}
